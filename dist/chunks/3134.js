"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3134],{3134:(e,t,r)=>{r.r(t),r.d(t,{default:()=>q});var n=r(23324),i=r(74791),s=(r(89847),r(32780),r(76997)),o=r(56793),a=r(57603),l=r(54067);r(15572);var u=r(21863),N=r(18223),c=r(9673),f=r(51598);const p=new f.X({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"}),m=new f.X({109006:"centimeters",9102:"decimal-degrees",109005:"decimeters",9002:"feet",109009:"inches",9036:"kilometers",9001:"meters",9035:"miles",109007:"millimeters",109012:"nautical-miles",9096:"yards"});var y=r(37501);let _=class extends y.wq{constructor(e){super(e),this.deviationUnit=null,this.geometries=null,this.maxDeviation=null}};(0,n._)([(0,i.Cb)({type:String,json:{write:!0}})],_.prototype,"deviationUnit",void 0),(0,n._)([(0,i.Cb)({json:{read:{reader:e=>e?e.map((e=>(0,c.im)(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],_.prototype,"geometries",void 0),(0,n._)([(0,i.Cb)({type:Number,json:{write:!0}})],_.prototype,"maxDeviation",void 0),_=(0,n._)([(0,o.j)("esri.rest.support.GeneralizeParameters")],_),_.from=(0,s.se)(_);const d=_;const T=new f.X({preserveShape:"preserve-shape"});function I(e){const{polylines:t,lengthUnit:r,geodesic:n,calculationType:i}=e.toJSON(),s={};s.polylines=JSON.stringify(t);const o=e.polylines[0].spatialReference;return s.sr=o.wkid?o.wkid:JSON.stringify(o.toJSON()),r&&(s.lengthUnit=r),n&&(s.geodesic=n),i&&(s.calculationType=T.toJSON(i)),s}var g=r(77401);let S=class extends y.wq{constructor(e){super(e),this.calculationType=null,this.geodesic=null,this.lengthUnit=null,this.polylines=null}};(0,n._)([(0,i.Cb)({type:String,json:{write:!0}})],S.prototype,"calculationType",void 0),(0,n._)([(0,i.Cb)({type:Boolean,json:{write:!0}})],S.prototype,"geodesic",void 0),(0,n._)([(0,i.Cb)({json:{write:!0}})],S.prototype,"lengthUnit",void 0),(0,n._)([(0,i.Cb)({type:[g.Z],json:{read:{reader:e=>e?e.map((e=>(0,c.im)(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],S.prototype,"polylines",void 0),S=(0,n._)([(0,o.j)("esri.rest.support.LengthsParameters")],S),S.from=(0,s.se)(S);const O=S,R=new f.X({esriGeometryOffsetBevelled:"bevelled",esriGeometryOffsetMitered:"mitered",esriGeometryOffsetRounded:"rounded"}),U=new f.X({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});let h=class extends y.wq{constructor(e){super(e),this.bevelRatio=null,this.geometries=null,this.offsetDistance=null,this.offsetHow=null,this.offsetUnit=null}};(0,n._)([(0,i.Cb)({type:Number,json:{write:!0}})],h.prototype,"bevelRatio",void 0),(0,n._)([(0,i.Cb)({json:{read:{reader:e=>e?e.map((e=>(0,c.im)(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],h.prototype,"geometries",void 0),(0,n._)([(0,i.Cb)({type:Number,json:{write:!0}})],h.prototype,"offsetDistance",void 0),(0,n._)([(0,i.Cb)({type:String,json:{write:!0}})],h.prototype,"offsetHow",void 0),(0,n._)([(0,i.Cb)({type:String,json:{write:!0}})],h.prototype,"offsetUnit",void 0),h=(0,n._)([(0,o.j)("esri.rest.support.OffsetParameters")],h),h.from=(0,s.se)(h);const E=h;var A=r(54421);const J=new f.X({esriGeometryRelationCross:"cross",esriGeometryRelationDisjoint:"disjoint",esriGeometryRelationIn:"in",esriGeometryRelationInteriorIntersection:"interior-intersection",esriGeometryRelationIntersection:"intersection",esriGeometryRelationLineCoincidence:"line-coincidence",esriGeometryRelationLineTouch:"line-touch",esriGeometryRelationOverlap:"overlap",esriGeometryRelationPointTouch:"point-touch",esriGeometryRelationTouch:"touch",esriGeometryRelationWithin:"within",esriGeometryRelationRelation:"relation"});let w=class extends y.wq{constructor(e){super(e),this.geometries1=null,this.geometries2=null,this.relation=null,this.relationParameter=null}};(0,n._)([(0,i.Cb)({json:{read:{reader:e=>e?e.map((e=>(0,c.im)(e))):null},write:{writer:(e,t)=>{t.geometries1=e.map((e=>e.toJSON()))}}}})],w.prototype,"geometries1",void 0),(0,n._)([(0,i.Cb)({json:{read:{reader:e=>e?e.map((e=>(0,c.im)(e))):null},write:{writer:(e,t)=>{t.geometries2=e.map((e=>e.toJSON()))}}}})],w.prototype,"geometries2",void 0),(0,n._)([(0,i.Cb)({type:String,json:{write:!0}})],w.prototype,"relation",void 0),(0,n._)([(0,i.Cb)({type:String,json:{write:!0}})],w.prototype,"relationParameter",void 0),w=(0,n._)([(0,o.j)("esri.rest.support.RelationParameters")],w),w.from=(0,s.se)(w);const C=w;var v=r(2364);const j=new f.X({0:"default-curve-extension",1:"relocate-ends",2:"keep-end-attributes",4:"no-end-attributes",8:"no-extend-at-from",16:"no-extend-at-to"});let D=class extends y.wq{constructor(e){super(e),this.extendHow="default-curve-extension",this.polylines=null,this.trimExtendTo=null}};(0,n._)([(0,i.Cb)({type:String,json:{write:!0}})],D.prototype,"extendHow",void 0),(0,n._)([(0,i.Cb)({type:[g.Z],json:{read:{reader:e=>e?e.map((e=>(0,c.im)(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],D.prototype,"polylines",void 0),(0,n._)([(0,i.Cb)({json:{read:{reader:e=>e?(0,c.im)(e):null},write:{writer:(e,t)=>{t.trimExtendTo=e.toJSON()}}}})],D.prototype,"trimExtendTo",void 0),D=(0,n._)([(0,o.j)("esri.rest.support.TrimExtendParameters")],D),D.from=(0,s.se)(D);const L=D;var M=r(98802);let b=class extends M.Z{constructor(e){super(e),this.url=null}areasAndLengths(e,t){return async function(e,t,r){const n=(0,l.en)(e),i={...n.query,f:"json",...t.toJSON()},s=(0,l.lA)(i,r);return(0,a.default)(n.path+"/areasAndLengths",s).then((e=>e.data))}(this.url,e,t)}autoComplete(e,t,r){return async function(e,t,r,n){const i=t[0].spatialReference,s=(0,l.en)(e),o={...s.query,f:"json",sr:JSON.stringify(i.toJSON()),polygons:JSON.stringify((0,u.F)(t).geometries),polylines:JSON.stringify((0,u.F)(r).geometries)},c=(0,l.lA)(o,n);return(0,a.default)(s.path+"/autoComplete",c).then((({data:e})=>(e.geometries||[]).map((({rings:e})=>new N.Z({spatialReference:i,rings:e})))))}(this.url,e,t,r)}buffer(e,t){return async function(e,t,r){const n=(0,l.en)(e),i={...n.query,f:"json",...t.toJSON()},s=t.outSpatialReference||t.geometries[0].spatialReference,o=(0,l.lA)(i,r);return(0,a.default)(n.path+"/buffer",o).then((e=>(e.data.geometries||[]).map((({rings:e})=>new N.Z({spatialReference:s,rings:e})))))}(this.url,e,t)}convexHull(e,t){return async function(e,t,r){const n=t[0].spatialReference,i=(0,l.en)(e),s={...i.query,f:"json",sr:JSON.stringify(n.toJSON()),geometries:JSON.stringify((0,u.F)(t))},o=(0,l.lA)(s,r);return(0,a.default)(i.path+"/convexHull",o).then((({data:e})=>(0,c.im)(e.geometry).set({spatialReference:n})))}(this.url,e,t)}cut(e,t,r){return async function(e,t,r,n){const i=(0,l.en)(e),s=t[0].spatialReference,o={...n,query:{...i.query,f:"json",sr:JSON.stringify(s),target:JSON.stringify({geometryType:(0,c.Ji)(t[0]),geometries:t}),cutter:JSON.stringify(r)}},u=await(0,a.default)(i.path+"/cut",o),{cutIndexes:N,geometries:f=[]}=u.data;return{cutIndexes:N,geometries:f.map((e=>{const t=(0,c.im)(e);return t.spatialReference=s,t}))}}(this.url,e,t,r)}densify(e,t){return async function(e,t,r){const n=t.geometries[0].spatialReference,i=(0,l.en)(e),s={...i.query,f:"json",...t.toJSON()},o=(0,l.lA)(s,r);return(0,a.default)(i.path+"/densify",o).then((({data:e})=>(e.geometries||[]).map((e=>(0,c.im)(e).set({spatialReference:n})))))}(this.url,e,t)}difference(e,t,r){return async function(e,t,r,n){const i=t[0].spatialReference,s=(0,l.en)(e);let o={query:{...s.query,f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify((0,u.F)(t)),geometry:JSON.stringify({geometryType:(0,c.Ji)(r),geometry:r.toJSON()})}};return n&&(o={...n,...o}),(0,a.default)(s.path+"/difference",o).then((({data:e})=>(e.geometries||[]).map((e=>(0,c.im)(e).set({spatialReference:i})))))}(this.url,e,t,r)}distance(e,t){return async function(e,t,r){const n=(0,l.en)(e),i={...n.query,f:"json",...t.toJSON()},s=(0,l.lA)(i,r);return(0,a.default)(n.path+"/distance",s).then((({data:e})=>e&&e.distance))}(this.url,e,t)}fromGeoCoordinateString(e,t){return async function(e,t,r){const n={};null!=t.sr&&"object"==typeof t.sr?n.sr=t.sr.wkid||JSON.stringify(t.sr):n.sr=t.sr,n.strings=JSON.stringify(t.strings);const i=t.conversionType||"mgrs";n.conversionType=p.toJSON(i),n.conversionMode=t.conversionMode;const s=(0,l.en)(e),o={...s.query,f:"json",...n},u=(0,l.lA)(o,r);return(0,a.default)(s.path+"/fromGeoCoordinateString",u).then((({data:e})=>e.coordinates))}(this.url,e,t)}generalize(e,t){return async function(e,t,r){const n=(t=d.from(t)).toJSON(),i=function(e){const{geometries:t,deviationUnit:r,maxDeviation:n}=e.toJSON(),i={maxDeviation:n};return t&&t.length&&(i.geometries=JSON.stringify({geometryType:(0,c.Ji)(t[0]),geometries:t}),i.sr=JSON.stringify(t[0].spatialReference)),m.write(r,i,"deviationUnit"),i}(t),s=(0,l.en)(e),o={...s.query,f:"json",...i},u=n.geometries[0].spatialReference,N=(0,l.lA)(o,r);return(0,a.default)(s.path+"/generalize",N).then((({data:e})=>(e.geometries||[]).map((e=>(0,c.im)(e).set({spatialReference:u})))))}(this.url,e,t)}intersect(e,t,r){return async function(e,t,r,n){const i=t[0].spatialReference,s=(0,l.en)(e),o={...s.query,f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify((0,u.F)(t)),geometry:JSON.stringify({geometryType:(0,c.Ji)(r),geometry:r.toJSON()})},N=(0,l.lA)(o,n);return(0,a.default)(s.path+"/intersect",N).then((({data:e})=>(e.geometries||[]).map((e=>(0,c.im)(e).set({spatialReference:i})))))}(this.url,e,t,r)}labelPoints(e,t){return function(e,t,r){const n=t.map((e=>e.toJSON())),i=t[0].spatialReference,s=(0,l.en)(e),o={...s.query,f:"json",sr:i.wkid?i.wkid:JSON.stringify(i.toJSON()),polygons:JSON.stringify(n)},u=(0,l.lA)(o,r);return(0,a.default)(s.path+"/labelPoints",u).then((({data:e})=>(e.labelPoints||[]).map((e=>(0,c.im)(e).set({spatialReference:i})))))}(this.url,e,t)}lengths(e,t){return async function(e,t,r){const n=I(t=O.from(t)),i=(0,l.en)(e),s={...i.query,f:"json",...n},o=(0,l.lA)(s,r);return(0,a.default)(i.path+"/lengths",o).then((({data:e})=>e))}(this.url,e,t)}offset(e,t){return async function(e,t,r){const n=function(e){const{geometries:t,bevelRatio:r,offsetDistance:n,offsetHow:i,offsetUnit:s}=e.toJSON(),o={bevelRatio:r,offsetDistance:n};return t&&t.length&&(o.geometries=JSON.stringify({geometryType:(0,c.Ji)(t[0]),geometries:t}),o.sr=JSON.stringify(t[0].spatialReference)),i&&(o.offsetHow=R.toJSON(i)),s&&(o.offsetUnit=U.toJSON(s)),o}(t=E.from(t)),i=(0,l.en)(e),s={...i.query,f:"json",...n},o=t.geometries[0].spatialReference,u=(0,l.lA)(s,r);return(0,a.default)(i.path+"/offset",u).then((({data:e})=>(e.geometries||[]).map((e=>(0,c.im)(e).set({spatialReference:o})))))}(this.url,e,t)}project(e,t){return(0,A.i)(this.url,e,t)}relation(e,t){return async function(e,t,r){const n=function(e){const{geometries1:t,geometries2:r,relation:n,relationParameter:i}=e.toJSON(),s={};if(t&&t.length){s.geometries1=JSON.stringify({geometryType:(0,c.Ji)(t[0]),geometries:t});const e=t[0].spatialReference;s.sr=e.wkid?e.wkid:JSON.stringify(e)}return r&&r.length>0&&(s.geometries2=JSON.stringify({geometryType:(0,c.Ji)(r[0]),geometries:r})),n&&(s.relation=J.toJSON(n)),i&&(s.relationParam=i),s}(t=C.from(t)),i=(0,l.en)(e),s={...i.query,f:"json",...n},o=(0,l.lA)(s,r);return(0,a.default)(i.path+"/relation",o).then((({data:e})=>e.relations))}(this.url,e,t)}reshape(e,t,r){return async function(e,t,r,n){const i=t.spatialReference,s=(0,l.en)(e),o={...s.query,f:"json",sr:JSON.stringify(i.toJSON()),target:JSON.stringify({geometryType:(0,c.Ji)(t),geometry:t.toJSON()}),reshaper:JSON.stringify(r.toJSON())},u=(0,l.lA)(o,n);return(0,a.default)(s.path+"/reshape",u).then((({data:e})=>(0,c.im)(e.geometry).set({spatialReference:i})))}(this.url,e,t,r)}simplify(e,t){return async function(e,t,r){const n="string"==typeof e?(0,v.mN)(e):e,i=t[0].spatialReference,s=(0,c.Ji)(t[0]),o={...r,query:{...n.query,f:"json",sr:i.wkid?i.wkid:JSON.stringify(i),geometries:JSON.stringify((0,u.F)(t))}},{data:l}=await(0,a.default)(n.path+"/simplify",o);return(0,u.o)(l.geometries,s,i)}(this.url,e,t)}toGeoCoordinateString(e,t){return async function(e,t,r){const n={};null!=t.sr&&"object"==typeof t.sr?n.sr=t.sr.wkid||JSON.stringify(t.sr):n.sr=t.sr,n.coordinates=JSON.stringify(t.coordinates);const i=t.conversionType||"mgrs";n.conversionType=p.toJSON(i),n.conversionMode=t.conversionMode,n.numOfDigits=t.numOfDigits,n.rounding=t.rounding,n.addSpaces=t.addSpaces;const s=(0,l.en)(e),o={...s.query,f:"json",...n},u=(0,l.lA)(o,r);return(0,a.default)(s.path+"/toGeoCoordinateString",u).then((({data:e})=>e.strings))}(this.url,e,t)}trimExtend(e,t){return async function(e,t,r){const n=function(e){const{extendHow:t,polylines:r,trimExtendTo:n}=e.toJSON(),i={};return i.extendHow=j.toJSON(t),r&&r.length&&(i.polylines=JSON.stringify(r),i.sr=JSON.stringify(r[0].spatialReference)),n&&(i.trimExtendTo=JSON.stringify(n)),i}(t=L.from(t)),i=(0,l.en)(e),s={...i.query,f:"json",...n},o=t.sr,u=(0,l.lA)(s,r);return(0,a.default)(i.path+"/trimExtend",u).then((({data:e})=>(e.geometries||[]).map((({paths:e})=>new g.Z({spatialReference:o,paths:e})))))}(this.url,e,t)}union(e,t){return async function(e,t,r){const n=t[0].spatialReference,i=(0,l.en)(e),s={...i.query,f:"json",sr:JSON.stringify(n.toJSON()),geometries:JSON.stringify((0,u.F)(t))},o=(0,l.lA)(s,r);return(0,a.default)(i.path+"/union",o).then((({data:e})=>(0,c.im)(e.geometry).set({spatialReference:n})))}(this.url,e,t)}};b.UNIT_METER=9001,b.UNIT_GERMAN_METER=9031,b.UNIT_FOOT=9002,b.UNIT_SURVEY_FOOT=9003,b.UNIT_CLARKE_FOOT=9005,b.UNIT_FATHOM=9014,b.UNIT_NAUTICAL_MILE=9030,b.UNIT_SURVEY_CHAIN=9033,b.UNIT_SURVEY_LINK=9034,b.UNIT_SURVEY_MILE=9035,b.UNIT_KILOMETER=9036,b.UNIT_CLARKE_YARD=9037,b.UNIT_CLARKE_CHAIN=9038,b.UNIT_CLARKE_LINK=9039,b.UNIT_SEARS_YARD=9040,b.UNIT_SEARS_FOOT=9041,b.UNIT_SEARS_CHAIN=9042,b.UNIT_SEARS_LINK=9043,b.UNIT_BENOIT_1895A_YARD=9050,b.UNIT_BENOIT_1895A_FOOT=9051,b.UNIT_BENOIT_1895A_CHAIN=9052,b.UNIT_BENOIT_1895A_LINK=9053,b.UNIT_BENOIT_1895B_YARD=9060,b.UNIT_BENOIT_1895B_FOOT=9061,b.UNIT_BENOIT_1895B_CHAIN=9062,b.UNIT_BENOIT_1895B_LINK=9063,b.UNIT_INDIAN_FOOT=9080,b.UNIT_INDIAN_1937_FOOT=9081,b.UNIT_INDIAN_1962_FOOT=9082,b.UNIT_INDIAN_1975_FOOT=9083,b.UNIT_INDIAN_YARD=9084,b.UNIT_INDIAN_1937_YARD=9085,b.UNIT_INDIAN_1962_YARD=9086,b.UNIT_INDIAN_1975_YARD=9087,b.UNIT_FOOT_1865=9070,b.UNIT_RADIAN=9101,b.UNIT_DEGREE=9102,b.UNIT_ARCMINUTE=9103,b.UNIT_ARCSECOND=9104,b.UNIT_GRAD=9105,b.UNIT_GON=9106,b.UNIT_MICRORADIAN=9109,b.UNIT_ARCMINUTE_CENTESIMAL=9112,b.UNIT_ARCSECOND_CENTESIMAL=9113,b.UNIT_MIL6400=9114,b.UNIT_BRITISH_1936_FOOT=9095,b.UNIT_GOLDCOAST_FOOT=9094,b.UNIT_INTERNATIONAL_CHAIN=109003,b.UNIT_INTERNATIONAL_LINK=109004,b.UNIT_INTERNATIONAL_YARD=109001,b.UNIT_STATUTE_MILE=9093,b.UNIT_SURVEY_YARD=109002,b.UNIT_50KILOMETER_LENGTH=109030,b.UNIT_150KILOMETER_LENGTH=109031,b.UNIT_DECIMETER=109005,b.UNIT_CENTIMETER=109006,b.UNIT_MILLIMETER=109007,b.UNIT_INTERNATIONAL_INCH=109008,b.UNIT_US_SURVEY_INCH=109009,b.UNIT_INTERNATIONAL_ROD=109010,b.UNIT_US_SURVEY_ROD=109011,b.UNIT_US_NAUTICAL_MILE=109012,b.UNIT_UK_NAUTICAL_MILE=109013,b.UNIT_SQUARE_INCHES="esriSquareInches",b.UNIT_SQUARE_FEET="esriSquareFeet",b.UNIT_SQUARE_YARDS="esriSquareYards",b.UNIT_ACRES="esriAcres",b.UNIT_SQUARE_MILES="esriSquareMiles",b.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",b.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",b.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",b.UNIT_SQUARE_METERS="esriSquareMeters",b.UNIT_ARES="esriAres",b.UNIT_HECTARES="esriHectares",b.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",(0,n._)([(0,i.Cb)()],b.prototype,"url",void 0),b=(0,n._)([(0,o.j)("esri.tasks.GeometryService")],b);const q=b}}]);